<#
//=======================================================================
// The code below operates on DryIoc.Container.
// The result will be resolution delegates generated by DryIoc.Container,
// then these delegates will be used by DryIocZero.Container at run-time.
//
// TODO: Change the code below to:
// 1. Configure DryIoc.container with your rules and conventions.
// 2. Register your services and implementations. 
// Please ensure to include assemblies and namespaces where they reside.
// 3. Identify the resolution roots: the services to be Resolved, rather then injected.
// 4. When done Save the DryIocZero/Container.Generated.tt class. Confirm on VisualStudio prompt if any.
// 5. Check result Container.Generated.cs for general compilation errors 
// and for resolution errors listed under comment "FAILED to generate resolution for"
//
//=======================================================================
#>

<#@ assembly Name="System.Core" #>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ assembly Name="$(ProjectDir)bin\$(Configuration)\Test.exe" #>

<#@ import Namespace="DryIoc" #>
<#@ import Namespace="Test"#>
<#// TODO: Insert assemblies and namespaces with your services to register in container #>

<#+
// TODO: Specify your container and registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    // NOTE: `RegisterDelegate` and `UseInstance` are not supported because of runtime state usage. 
    // Instead you can use `RegisterPlaceholder` to fix object graph generation, then fill in
	// placeholder using run-time `DryIocZero.RegisterDelegate` and `DryIocZero.UseInstance`

    // TODO: Add registrations
    container.Register<Test.Services.IService, Test.Services.ServiceImpl>();

    return container;
}

// TODO: Identify resolution roots services. Return true for the service you'll expect to Resolve from container.
bool IsResolutionRoot(ServiceRegistrationInfo info)
{
    // EXAMPLE: The `SetupAsResolutionRoots` will select services registered with `Setup.With(asResolutionRo1ot: true)`
    return true;
}
#>